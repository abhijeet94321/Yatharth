rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Defines a global function to check if a user is signed in.
     */
    function isSignedIn() {
      return request.auth != null;
    }

    /**
     * @description Defines a global function to check if the request is made by the owner of the document.
     */
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    /**
     * @description Defines a global function to check if the existing document is owned by the user.
     */
    function isExistingOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
    }

    /**
     * @description Enforces that the user ID in the path matches the authenticated user's ID.
     * @path /users/{userId}
     * @allow (create) - User with ID 'user123' creates their profile.
     *   - auth: { uid: 'user123' }
     *   - request.resource.data: { id: 'user123', email: 'test@example.com', registrationDate: '2024-01-01' }
     * @deny (create) - User with ID 'user123' tries to create a profile for 'user456'.
     *   - auth: { uid: 'user123' }
     *   - request.resource.data: { id: 'user456', email: 'test@example.com', registrationDate: '2024-01-01' }
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces that only the owner can manage their meditation sessions.
     * @path /users/{userId}/meditationSessions/{sessionId}
     * @allow (create) - User with ID 'user123' creates a meditation session.
     *   - auth: { uid: 'user123' }
     *   - request.resource.data: { id: 'session1', userId: 'user123', startTime: '2024-01-01', endTime: '2024-01-01', durationSeconds: 600 }
     * @deny (update) - User with ID 'user123' tries to update a meditation session for 'user456'.
     *   - auth: { uid: 'user123' }
     *   - request.resource.data: { id: 'session1', userId: 'user456', startTime: '2024-01-01', endTime: '2024-01-01', durationSeconds: 600 }
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/meditationSessions/{sessionId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces that only the owner can manage their daily meditation summaries.
     * @path /users/{userId}/dailyMeditationSummaries/{summaryId}
     * @allow (create) - User with ID 'user123' creates a daily meditation summary.
     *   - auth: { uid: 'user123' }
     *   - request.resource.data: { id: 'summary1', userId: 'user123', date: '2024-01-01', totalMeditationTimeSeconds: 600 }
     * @deny (delete) - User with ID 'user123' tries to delete a summary for 'user456'.
     *   - auth: { uid: 'user123' }
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/dailyMeditationSummaries/{summaryId} {
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}