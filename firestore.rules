rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Secure access to user profile data.
     * @path /users/{userId}
     * @allow (create) User with matching UID can create their profile.
     * @allow (get, update, delete, list) User with matching UID can read, update, and delete their profile.
     * @deny (create) User cannot create a profile with a different UID.
     * @deny (get, update, delete, list) User cannot read, update, or delete another user's profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && exists(resource);
      }

      allow get: if isOwner(userId);
      allow list: if false; // User listing is disabled for privacy

      allow create: if isSignedIn()
                  && isOwner(userId)
                  && request.resource.data.id == userId;

      allow update: if isExistingOwner(userId);

      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure access to meditation session data.
     * @path /users/{userId}/meditationSessions/{sessionId}
     * @allow (create) User with matching UID can create a session.
     * @allow (get, update, delete, list) User with matching UID can read, update, and delete their own sessions.
     * @deny (create) User cannot create a session for another user.
     * @deny (get, update, delete, list) User cannot read, update, or delete another user's sessions.
     * @principle Enforces document ownership and referential integrity for all operations.
     */
    match /users/{userId}/meditationSessions/{sessionId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && exists(resource);
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isSignedIn()
                  && isOwner(userId)
                  && request.resource.data.userId == userId;

      allow update: if isExistingOwner(userId);

      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Secure access to daily meditation summary data.
     * @path /users/{userId}/dailyMeditationSummaries/{summaryId}
     * @allow (create) User with matching UID can create a summary.
     * @allow (get, update, delete, list) User with matching UID can read, update, and delete their own summaries.
     * @deny (create) User cannot create a summary for another user.
     * @deny (get, update, delete, list) User cannot read, update, or delete another user's summaries.
     * @principle Enforces document ownership and referential integrity for all operations.
     */
    match /users/{userId}/dailyMeditationSummaries/{summaryId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && exists(resource);
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isSignedIn()
                  && isOwner(userId)
                  && request.resource.data.userId == userId;

      allow update: if isExistingOwner(userId);

      allow delete: if isExistingOwner(userId);
    }
  }
}