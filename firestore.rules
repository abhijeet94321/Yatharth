rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile data.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user123' can create their profile at /users/user123 if request.auth.uid == 'user123'.
     * @allow (get) - User with UID 'user123' can read their profile at /users/user123 if request.auth.uid == 'user123'.
     * @allow (update) - User with UID 'user123' can update their profile at /users/user123 if request.auth.uid == 'user123'.
     * @allow (delete) - User with UID 'user123' can delete their profile at /users/user123 if request.auth.uid == 'user123'.
     * @deny (create) - User with UID 'user456' cannot create a profile at /users/user123.
     * @deny (get) - User with UID 'user456' cannot read the profile at /users/user123.
     * @deny (update) - User with UID 'user456' cannot update the profile at /users/user123.
     * @deny (delete) - User with UID 'user456' cannot delete the profile at /users/user123.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false; // No listing of users.
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Controls access to meditation session data for a specific user.
     * @path /users/{userId}/meditationSessions/{sessionId}
     * @allow (create) - User with UID 'user123' can create a session under /users/user123/meditationSessions/session1 if request.auth.uid == 'user123'.
     * @allow (get) - User with UID 'user123' can read a session under /users/user123/meditationSessions/session1 if request.auth.uid == 'user123'.
     * @allow (list) - User with UID 'user123' can list sessions under /users/user123/meditationSessions if request.auth.uid == 'user123'.
     * @allow (update) - User with UID 'user123' can update a session under /users/user123/meditationSessions/session1 if request.auth.uid == 'user123'.
     * @allow (delete) - User with UID 'user123' can delete a session under /users/user123/meditationSessions/session1 if request.auth.uid == 'user123'.
     * @deny (create) - User with UID 'user456' cannot create a session under /users/user123/meditationSessions/session1.
     * @deny (get) - User with UID 'user456' cannot read a session under /users/user123/meditationSessions/session1.
     * @deny (list) - User with UID 'user456' cannot list sessions under /users/user123/meditationSessions.
     * @deny (update) - User with UID 'user456' cannot update a session under /users/user123/meditationSessions/session1.
     * @deny (delete) - User with UID 'user456' cannot delete a session under /users/user123/meditationSessions/session1.
     * @principle Enforces document ownership and relational integrity for meditation sessions.
     */
    match /users/{userId}/meditationSessions/{sessionId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && exists(resource);
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to daily meditation summary data for a specific user.
     * @path /users/{userId}/dailyMeditationSummaries/{summaryId}
     * @allow (create) - User with UID 'user123' can create a summary under /users/user123/dailyMeditationSummaries/summary1 if request.auth.uid == 'user123'.
     * @allow (get) - User with UID 'user123' can read a summary under /users/user123/dailyMeditationSummaries/summary1 if request.auth.uid == 'user123'.
     * @allow (list) - User with UID 'user123' can list summaries under /users/user123/dailyMeditationSummaries if request.auth.uid == 'user123'.
     * @allow (update) - User with UID 'user123' can update a summary under /users/user123/dailyMeditationSummaries/summary1 if request.auth.uid == 'user123'.
     * @allow (delete) - User with UID 'user123' can delete a summary under /users/user123/dailyMeditationSummaries/summary1 if request.auth.uid == 'user123'.
     * @deny (create) - User with UID 'user456' cannot create a summary under /users/user123/dailyMeditationSummaries/summary1.
     * @deny (get) - User with UID 'user456' cannot read a summary under /users/user123/dailyMeditationSummaries/summary1.
     * @deny (list) - User with UID 'user456' cannot list summaries under /users/user123/dailyMeditationSummaries.
     * @deny (update) - User with UID 'user456' cannot update a summary under /users/user123/dailyMeditationSummaries/summary1.
     * @deny (delete) - User with UID 'user456' cannot delete a summary under /users/user123/dailyMeditationSummaries/summary1.
     * @principle Enforces document ownership and relational integrity for daily meditation summaries.
     */
    match /users/{userId}/dailyMeditationSummaries/{summaryId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && exists(resource);
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }
  }
}