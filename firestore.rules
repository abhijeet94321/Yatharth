/**
 * @fileoverview Firestore Security Rules for Yatharth 2025.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model for all data. Only authenticated users
 * can access their own data, with administrative access granted to all documents.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles.
 * - /users/{userId}/meditationSessions/{sessionId}: Stores meditation sessions for each user.
 * - /users/{userId}/dailyMeditationSummaries/{summaryId}: Stores daily meditation summaries for each user.
 *
 * Key Security Decisions:
 * - Users can only access their own data (profile, meditation sessions, summaries).
 * - Administrative access is granted to all users' documents.
 * - Data validation is minimal in this prototyping phase, focusing on ownership and relationship integrity.
 *
 * Denormalization for Authorization:
 *  The data structure uses path-based authorization (nesting data under /users/{userId}) to avoid
 *  the need for `get()` calls within the security rules. The userId is implicitly available
 *  from the path.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile documents.
     * @path /users/{userId}
     * @allow (create) Signed-in user creates their own profile.
     * @allow (get, list, update, delete) Signed-in user with the same ID as the document.
     * @deny (create) Signed-in user tries to create a profile with a different ID.
     * @principle Enforces document ownership and identity verification for user profiles.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Controls access to meditation session documents for a specific user.
     * @path /users/{userId}/meditationSessions/{sessionId}
     * @allow (create) Signed-in user creates a session under their own user ID.
     * @allow (get, list, update, delete) Signed-in user with the same ID as the parent user document.
     * @deny (create) Signed-in user tries to create a session under a different user ID.
     * @principle Enforces document ownership and identity verification for meditation sessions.
     */
    match /users/{userId}/meditationSessions/{sessionId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }

    /**
     * @description Controls access to daily meditation summary documents for a specific user.
     * @path /users/{userId}/dailyMeditationSummaries/{summaryId}
     * @allow (create) Signed-in user creates a summary under their own user ID.
     * @allow (get, list, update, delete) Signed-in user with the same ID as the parent user document.
     * @deny (create) Signed-in user tries to create a summary under a different user ID.
     * @principle Enforces document ownership and identity verification for daily meditation summaries.
     */
    match /users/{userId}/dailyMeditationSummaries/{summaryId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isSignedIn() {
        return request.auth != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if request.auth.uid == userId;
      allow update: if isOwner(userId);
      allow delete: if isOwner(userId);
    }
  }
}