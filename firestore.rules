/**
 * @fileOverview Firestore Security Rules for Yatharth 2025 Application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model, ensuring that users can only access their own data.
 *
 * Data Structure:
 * All data is nested under /users/{userId}, with subcollections for meditation sessions and daily summaries.
 *
 * Key Security Decisions:
 * - Listing the /users collection is denied to prevent information disclosure.
 * - All write operations are protected by authorization checks to prevent unauthorized data modification.
 * - Data consistency is enforced by validating the userId within documents against the path.
 *
 * Authorization Independence:
 * Rules avoid using `get()` calls by relying on path-based authorization and ensuring necessary data (e.g., userId)
 * is either present in the path or directly within the document.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Prevents listing all users.
     * @path /users
     * @allow None - Listing users is not permitted.
     * @deny list: Always.
     * @principle Prevents information disclosure by disallowing listing of users.
     */
    match /users {
      allow get: if false;
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Controls access to user profile data.
     * @path /users/{userId}
     * @allow (create) - If the user is creating their own profile (auth.uid == userId).
     * @allow (get, update, delete) - If the authenticated user's ID matches the userId in the path.
     * @deny (create, update, delete) - If the authenticated user's ID does not match the userId in the path.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isExistingOwner(userId);
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to meditation session data for a specific user.
     * @path /users/{userId}/meditationSessions/{sessionId}
     * @allow (create, get, update, delete) - If the authenticated user's ID matches the userId in the path.
     * @deny (create, update, delete) - If the authenticated user's ID does not match the userId in the path.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/meditationSessions/{sessionId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && request.resource.data.userId == userId;
      allow update: if isSignedIn() && isExistingOwner(userId) && resource.data.userId == userId;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Controls access to daily meditation summaries for a specific user.
     * @path /users/{userId}/dailyMeditationSummaries/{summaryId}
     * @allow (create, get, update, delete) - If the authenticated user's ID matches the userId in the path.
     * @deny (create, update, delete) - If the authenticated user's ID does not match the userId in the path.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/dailyMeditationSummaries/{summaryId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && request.resource.data.userId == userId;
      allow update: if isSignedIn() && isExistingOwner(userId) && resource.data.userId == userId;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }

    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    function isExistingOwner(userId) {
        return isSignedIn() && isOwner(userId) && resource != null;
    }
  }
}