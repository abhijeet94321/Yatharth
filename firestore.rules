/**
 * @fileOverview Firestore Security Rules for the Yatharth 2025 application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model.  Users can only access their own data.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profiles, accessible only by the user themselves.
 * - /users/{userId}/meditationSessions/{sessionId}: Stores meditation sessions, accessible only by the owning user.
 * - /users/{userId}/dailyMeditationSummaries/{summaryId}: Stores daily meditation summaries, accessible only by the owning user.
 *
 * Key Security Decisions:
 * - User listing is explicitly denied to prevent unauthorized access to user data.
 * - All data is nested under /users/{userId} to enforce ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects user profiles.  Only the user themselves can access their profile.
     * @path /users/{userId}
     * @allow (create) User with ID 'user123' can create their profile if authenticated as 'user123'.
     * @allow (get) User with ID 'user123' can read their profile if authenticated as 'user123'.
     * @allow (update) User with ID 'user123' can update their profile if authenticated as 'user123'.
     * @allow (delete) User with ID 'user123' can delete their profile if authenticated as 'user123'.
     * @deny (create) User with ID 'user123' cannot create a profile for 'user456'.
     * @deny (get) User with ID 'user123' cannot read the profile of 'user456'.
     * @deny (update) User with ID 'user123' cannot update the profile of 'user456'.
     * @deny (delete) User with ID 'user123' cannot delete the profile of 'user456'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      // Helper function to check if the user is signed in and owns the document.
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;

      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Protects meditation session data for a specific user.
     * @path /users/{userId}/meditationSessions/{sessionId}
     * @allow (create) User with ID 'user123' can create a meditation session if authenticated as 'user123'.
     * @allow (get) User with ID 'user123' can read a meditation session if authenticated as 'user123'.
     * @allow (list) User with ID 'user123' can list meditation sessions if authenticated as 'user123'.
     * @allow (update) User with ID 'user123' can update a meditation session if authenticated as 'user123'.
     * @allow (delete) User with ID 'user123' can delete a meditation session if authenticated as 'user123'.
     * @deny (create) User with ID 'user123' cannot create a meditation session for 'user456'.
     * @deny (get) User with ID 'user123' cannot read a meditation session of 'user456'.
     * @deny (list) User with ID 'user123' cannot list meditation sessions of 'user456'.
     * @deny (update) User with ID 'user123' cannot update a meditation session of 'user456'.
     * @deny (delete) User with ID 'user123' cannot delete a meditation session of 'user456'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/meditationSessions/{sessionId} {
      // Inherit isSignedIn() and isOwner() from parent scope

      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

        function isExistingOwner(userId) {
          return isOwner(userId) && resource != null;
        }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Protects daily meditation summary data for a specific user.
     * @path /users/{userId}/dailyMeditationSummaries/{summaryId}
     * @allow (create) User with ID 'user123' can create a daily meditation summary if authenticated as 'user123'.
     * @allow (get) User with ID 'user123' can read a daily meditation summary if authenticated as 'user123'.
     * @allow (list) User with ID 'user123' can list daily meditation summaries if authenticated as 'user123'.
     * @allow (update) User with ID 'user123' can update a daily meditation summary if authenticated as 'user123'.
     * @allow (delete) User with ID 'user123' can delete a daily meditation summary if authenticated as 'user123'.
     * @deny (create) User with ID 'user123' cannot create a daily meditation summary for 'user456'.
     * @deny (get) User with ID 'user123' cannot read a daily meditation summary of 'user456'.
     * @deny (list) User with ID 'user123' cannot list daily meditation summaries of 'user456'.
     * @deny (update) User with ID 'user123' cannot update a daily meditation summary of 'user456'.
     * @deny (delete) User with ID 'user123' cannot delete a daily meditation summary of 'user456'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/dailyMeditationSummaries/{summaryId} {
      // Inherit isSignedIn() and isOwner() from parent scope

      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return isSignedIn() && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);

      allow create: if isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}