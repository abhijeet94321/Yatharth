/**
 * @file Firestore Security Rules
 * @description This ruleset enforces a strict user-ownership model for all data.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile data.
 * - /users/{userId}/meditationSessions/{sessionId}: Stores meditation session data for a specific user.
 * - /users/{userId}/dailyMeditationSummaries/{summaryId}: Stores daily meditation summaries for a specific user.
 *
 * Key Security Decisions:
 * - All data is private and accessible only to the owning user, based on their Firebase Authentication UID.
 * - List operations on user subcollections are allowed only for the owning user.
 * - Data shape is not strictly validated to allow for rapid prototyping.
 *
 * Denormalization for Authorization:
 * - The `userId` is present both in the path and within the documents in the `meditationSessions` and `dailyMeditationSummaries` collections.
 *   This allows for efficient path-based authorization without the need for `get()` calls.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile data.
     * @path /users/{userId}
     * @allow (create) User with matching UID can create their profile.
     * @allow (get, update, delete) User with matching UID can access/modify their profile.
     * @deny (create) User cannot create a profile with a mismatched UID.
     * @deny (get, update, delete) User cannot access/modify another user's profile.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Controls access to meditation session data for a specific user.
     * @path /users/{userId}/meditationSessions/{sessionId}
     * @allow (create) User with matching UID can create a session under their profile.
     * @allow (get, list, update, delete) User with matching UID can access/modify their own sessions.
     * @deny (create) User cannot create a session under another user's profile.
     * @deny (get, list, update, delete) User cannot access/modify another user's sessions.
     * @principle Enforces document ownership and restricts access to a user's own data.
     */
    match /users/{userId}/meditationSessions/{sessionId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Controls access to daily meditation summaries for a specific user.
     * @path /users/{userId}/dailyMeditationSummaries/{summaryId}
     * @allow (create) User with matching UID can create a summary under their profile.
     * @allow (get, list, update, delete) User with matching UID can access/modify their own summaries.
     * @deny (create) User cannot create a summary under another user's profile.
     * @deny (get, list, update, delete) User cannot access/modify another user's summaries.
     * @principle Enforces document ownership and restricts access to a user's own data.
     */
    match /users/{userId}/dailyMeditationSummaries/{summaryId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isSignedIn() && isOwner(userId);
      allow delete: if isSignedIn() && isOwner(userId);
    }
  }
}