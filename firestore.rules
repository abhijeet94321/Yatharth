/**
 * @fileOverview Firestore Security Rules for Yatharth 2025 Application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model, where users can only access their own data.
 *
 * Data Structure:
 * All data is nested under /users/{userId}, with subcollections for meditation sessions and daily summaries.
 *
 * Key Security Decisions:
 * - Listing of the /users collection is explicitly denied to protect user privacy.
 * - Authorization is based on matching the authenticated user's UID against the userId in the path.
 * - Data consistency between the path and the document's internal fields (e.g., userId) is enforced on create and update operations.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects the root-level /users collection. Users cannot list all users.
     * @path /users
     * @allow (get) Anyone can attempt to get a specific user document; if it exists, further rules apply.
     * @deny (list) Listing all users is prohibited.
     * @deny (create) Users cannot create documents directly in the /users collection.
     * @deny (update) Users cannot update documents directly in the /users collection.
     * @deny (delete) Users cannot delete documents directly in the /users collection.
     * @principle Prevents unauthorized listing of user data.
     */
    match /users {
      allow get: if false;
      allow list: if false;
      allow create: if false;
      allow update: if false;
      allow delete: if false;
    }

    /**
     * @description Enforces user-ownership for /users/{userId} documents.
     * @path /users/{userId}
     * @allow (get) User with UID {userId} can read their own profile data.
     * @allow (create) User with UID {userId} can create their own profile, with matching id.
     * @allow (update) User with UID {userId} can update their own profile, but cannot change the userId.
     * @allow (delete) User with UID {userId} can delete their own profile.
     * @deny (get) User with UID "otherUserId" cannot read user {userId}'s profile.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isSignedIn() && isExistingOwner(userId) && resource.data.id == request.resource.data.id;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Enforces user-ownership for /users/{userId}/meditationSessions/{sessionId} documents.
     * @path /users/{userId}/meditationSessions/{sessionId}
     * @allow (get) User with UID {userId} can read their own meditation session.
     * @allow (list) User with UID {userId} can list their own meditation sessions.
     * @allow (create) User with UID {userId} can create a meditation session with a matching userId.
     * @allow (update) User with UID {userId} can update their own meditation session, but cannot change the userId.
     * @allow (delete) User with UID {userId} can delete their own meditation session.
     * @deny (get) User with UID "otherUserId" cannot read user {userId}'s meditation session.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/meditationSessions/{sessionId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isSignedIn() && isExistingOwner(userId) && resource.data.userId == request.resource.data.userId;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Enforces user-ownership for /users/{userId}/dailyMeditationSummaries/{summaryId} documents.
     * @path /users/{userId}/dailyMeditationSummaries/{summaryId}
     * @allow (get) User with UID {userId} can read their own daily meditation summary.
     * @allow (list) User with UID {userId} can list their own daily meditation summaries.
     * @allow (create) User with UID {userId} can create a daily meditation summary with a matching userId.
     * @allow (update) User with UID {userId} can update their own daily meditation summary, but cannot change the userId.
     * @allow (delete) User with UID {userId} can delete their own daily meditation summary.
     * @deny (get) User with UID "otherUserId" cannot read user {userId}'s daily meditation summary.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/dailyMeditationSummaries/{summaryId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isSignedIn() && isExistingOwner(userId) && resource.data.userId == request.resource.data.userId;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return isSignedIn() && isOwner(userId) && resource != null;
  }
}