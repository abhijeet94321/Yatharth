/**
 * @fileoverview Firestore Security Rules for the Yatharth 2025 application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model, ensuring that users can only access their own data.
 *
 * Data Structure:
 * All data is nested under /users/{userId}, with subcollections for meditation sessions and daily summaries.
 *
 * Key Security Decisions:
 * - Users can only create, read, update, and delete their own data.
 * - Listing all users is disallowed for security reasons.
 * - Data required for authorization is denormalized onto the documents being secured to avoid costly `get()` calls.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects the /users collection, ensuring only authenticated users can manage their own profiles.
     * @path /users/{userId}
     * @allow (create) - User with UID 'user123' can create their own user document.
     * @allow (get, update, delete) - User with UID 'user123' can read, update, and delete their own user document.
     * @deny (create, update, delete) - User with UID 'otherUser' cannot create, update, or delete user document for 'user123'.
     * @deny (list) - Any user cannot list all user documents.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      // Only allow a user to create their own user document.
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      // Only allow the owner to get their own user document.
      allow get: if isSignedIn() && isOwner(userId);
      // Only allow the owner to update their own user document, and ensure immutability of the userId field.
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      // Only allow the owner to delete their own user document.
      allow delete: if isSignedIn() && isExistingOwner(userId);
      // Prevent listing all users.
      allow list: if false;
    }

    /**
     * @description Protects the /users/{userId}/meditationSessions collection, ensuring only the owner can manage their meditation sessions.
     * @path /users/{userId}/meditationSessions/{sessionId}
     * @allow (create) - User with UID 'user123' can create a meditation session document under their user document.
     * @allow (get, update, delete) - User with UID 'user123' can read, update, and delete their own meditation session documents.
     * @deny (create, update, delete) - User with UID 'otherUser' cannot create, update, or delete meditation session documents for 'user123'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/meditationSessions/{sessionId} {
      // Only allow the owner to create a meditation session.
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      // Only allow the owner to get their own meditation session.
      allow get: if isSignedIn() && isOwner(userId);
      // Only allow the owner to update their own meditation session, and ensure immutability of the userId field.
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      // Only allow the owner to delete their own meditation session.
      allow delete: if isSignedIn() && isExistingOwner(userId);
      // Only allow the owner to list their own meditation sessions.
      allow list: if isSignedIn() && isOwner(userId);
    }

    /**
     * @description Protects the /users/{userId}/dailyMeditationSummaries collection, ensuring only the owner can manage their daily meditation summaries.
     * @path /users/{userId}/dailyMeditationSummaries/{summaryId}
     * @allow (create) - User with UID 'user123' can create a daily meditation summary document under their user document.
     * @allow (get, update, delete) - User with UID 'user123' can read, update, and delete their own daily meditation summary documents.
     * @deny (create, update, delete) - User with UID 'otherUser' cannot create, update, or delete daily meditation summary documents for 'user123'.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId}/dailyMeditationSummaries/{summaryId} {
      // Only allow the owner to create a daily meditation summary.
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      // Only allow the owner to get their own daily meditation summary.
      allow get: if isSignedIn() && isOwner(userId);
      // Only allow the owner to update their own daily meditation summary, and ensure immutability of the userId field.
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      // Only allow the owner to delete their own daily meditation summary.
      allow delete: if isSignedIn() && isExistingOwner(userId);
      // Only allow the owner to list their own daily meditation summaries.
      allow list: if isSignedIn() && isOwner(userId);
    }
  }
}

// Helper function to determine if the user is signed in.
function isSignedIn() {
  return request.auth != null;
}

// Helper function to determine if the user is the owner of the document.
function isOwner(userId) {
  return request.auth.uid == userId;
}

// Helper function to determine if the user is the owner of the document and if the document exists.
function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
}