/**
 * @fileOverview Firestore Security Rules for Yatharth 2025 Application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model, ensuring that users can only access their own data.
 *
 * Data Structure:
 * All data is nested under /users/{userId}, with subcollections for meditation sessions and daily summaries.
 *
 * Key Security Decisions:
 * - Listing the root `/users` collection is disallowed to prevent unauthorized user discovery.
 * - All authorization decisions are based on the authenticated user's UID (`request.auth.uid`) matching the `userId` path parameter.
 * - Data consistency between the path and the document's internal `userId` field is enforced on creation and updates.
 *
 * Denormalization for Authorization:
 * The data structure is designed to avoid costly `get()` calls in security rules. User-specific data is nested under the `/users/{userId}` path,
 * allowing rules to directly compare `request.auth.uid` with the `userId` path parameter.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Prevents listing the entire /users collection.
     * @path /users
     * @allow None - Listing is explicitly denied.
     * @deny list: Always denied.
     * @principle Prevents unauthorized user discovery.
     */
    match /users {
      allow list: if false;
    }

    /**
     * @description Manages user profile data. Only the user themselves can access their own profile.
     * @path /users/{userId}
     * @allow (create) - Authenticated user with UID 'user123' can create a profile at /users/user123 if the document's 'id' field also equals 'user123'.
     * @allow (get) - Authenticated user with UID 'user123' can read their profile at /users/user123.
     * @allow (update) - Authenticated user with UID 'user123' can update their profile at /users/user123.
     * @allow (delete) - Authenticated user with UID 'user123' can delete their profile at /users/user123.
     * @deny (create) - Authenticated user with UID 'user456' cannot create a profile at /users/user123.
     * @deny (get) - Authenticated user with UID 'user456' cannot read the profile at /users/user123.
     * @deny (update) - Authenticated user with UID 'user456' cannot update the profile at /users/user123.
     * @deny (delete) - Authenticated user with UID 'user456' cannot delete the profile at /users/user123.
     * @principle Enforces document ownership for all operations.  Validates data consistency between the path and the document's internal 'id' field.
     */
    match /users/{userId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Manages meditation session data for a specific user. Only the user themselves can access their own sessions.
     * @path /users/{userId}/meditationSessions/{sessionId}
     * @allow (create) - Authenticated user with UID 'user123' can create a session at /users/user123/meditationSessions/session1 if the document's 'userId' field also equals 'user123'.
     * @allow (get) - Authenticated user with UID 'user123' can read their session at /users/user123/meditationSessions/session1.
     * @allow (list) - Authenticated user with UID 'user123' can list their sessions at /users/user123/meditationSessions.
     * @allow (update) - Authenticated user with UID 'user123' can update their session at /users/user123/meditationSessions/session1.
     * @allow (delete) - Authenticated user with UID 'user123' can delete their session at /users/user123/meditationSessions/session1.
     * @deny (create) - Authenticated user with UID 'user456' cannot create a session at /users/user123/meditationSessions/session1.
     * @deny (get) - Authenticated user with UID 'user456' cannot read the session at /users/user123/meditationSessions/session1.
     * @deny (list) - Authenticated user with UID 'user456' cannot list sessions at /users/user123/meditationSessions.
     * @deny (update) - Authenticated user with UID 'user456' cannot update the session at /users/user123/meditationSessions/session1.
     * @deny (delete) - Authenticated user with UID 'user456' cannot delete the session at /users/user123/meditationSessions/session1.
     * @principle Enforces document ownership for all operations.  Validates data consistency between the path and the document's internal 'userId' field.
     */
    match /users/{userId}/meditationSessions/{sessionId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }

    /**
     * @description Manages daily meditation summaries for a specific user. Only the user themselves can access their own summaries.
     * @path /users/{userId}/dailyMeditationSummaries/{summaryId}
     * @allow (create) - Authenticated user with UID 'user123' can create a summary at /users/user123/dailyMeditationSummaries/summary1 if the document's 'userId' field also equals 'user123'.
     * @allow (get) - Authenticated user with UID 'user123' can read their summary at /users/user123/dailyMeditationSummaries/summary1.
     * @allow (list) - Authenticated user with UID 'user123' can list their summaries at /users/user123/dailyMeditationSummaries.
     * @allow (update) - Authenticated user with UID 'user123' can update their summary at /users/user123/dailyMeditationSummaries/summary1.
     * @allow (delete) - Authenticated user with UID 'user123' can delete their summary at /users/user123/dailyMeditationSummaries/summary1.
     * @deny (create) - Authenticated user with UID 'user456' cannot create a summary at /users/user123/dailyMeditationSummaries/summary1.
     * @deny (get) - Authenticated user with UID 'user456' cannot read the summary at /users/user123/dailyMeditationSummaries/summary1.
     * @deny (list) - Authenticated user with UID 'user456' cannot list summaries at /users/user123/dailyMeditationSummaries.
     * @deny (update) - Authenticated user with UID 'user456' cannot update the summary at /users/user123/dailyMeditationSummaries/summary1.
     * @deny (delete) - Authenticated user with UID 'user456' cannot delete the summary at /users/user123/dailyMeditationSummaries/summary1.
     * @principle Enforces document ownership for all operations.  Validates data consistency between the path and the document's internal 'userId' field.
     */
    match /users/{userId}/dailyMeditationSummaries/{summaryId} {
      allow get: if isSignedIn() && isOwner(userId);
      allow list: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isSignedIn() && isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isSignedIn() && isExistingOwner(userId);
    }
  }

  // Helper functions
  function isSignedIn() {
    return request.auth != null;
  }

  function isOwner(userId) {
    return request.auth.uid == userId;
  }

  function isExistingOwner(userId) {
    return isOwner(userId) && resource != null;
  }
}