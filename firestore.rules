/**
 * @fileOverview Firestore Security Rules for Yatharth 2025 application.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model, ensuring that only authenticated users can access their own data.
 *
 * Data Structure:
 * All user-related data is nested under /users/{userId}, including meditation sessions and daily summaries. This structure provides clear ownership and simplifies security rules.
 *
 * Key Security Decisions:
 * - User listing is disallowed to protect user privacy.
 * - Data access is restricted to the authenticated user matching the `userId` in the path.
 * - The ruleset uses path-based authorization to secure list operations.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile data.
     * @path /users/{userId}
     * @allow (create) User with matching UID can create their profile.
     * @allow (get, update, delete) User with matching UID can access their profile.
     * @deny (create) User cannot create a profile with a different UID.
     * @deny (get, update, delete) User cannot access another user's profile.
     * @principle Enforces user-ownership for profile data, ensuring that only the authenticated user can manage their own profile.
     */
    match /users/{userId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }

      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.id == resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to meditation session data for a specific user.
     * @path /users/{userId}/meditationSessions/{sessionId}
     * @allow (create) User with matching UID can create meditation sessions under their profile.
     * @allow (get, list, update, delete) User with matching UID can access their own meditation sessions.
     * @deny (create) User cannot create meditation sessions under another user's profile.
     * @deny (get, list, update, delete) User cannot access another user's meditation sessions.
     * @principle Enforces user-ownership for meditation sessions, ensuring that only the authenticated user can manage their own sessions.
     */
    match /users/{userId}/meditationSessions/{sessionId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to daily meditation summary data for a specific user.
     * @path /users/{userId}/dailyMeditationSummaries/{summaryId}
     * @allow (create) User with matching UID can create daily meditation summaries under their profile.
     * @allow (get, list, update, delete) User with matching UID can access their own daily meditation summaries.
     * @deny (create) User cannot create daily meditation summaries under another user's profile.
     * @deny (get, list, update, delete) User cannot access another user's daily meditation summaries.
     * @principle Enforces user-ownership for daily meditation summaries, ensuring that only the authenticated user can manage their own summaries.
     */
    match /users/{userId}/dailyMeditationSummaries/{summaryId} {
      function isSignedIn() {
        return request.auth != null;
      }

      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && request.resource.data.userId == resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }
  }
}