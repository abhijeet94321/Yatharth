/**
 * @fileoverview Firestore Security Rules for Yatharth 2025.
 *
 * Core Philosophy:
 * This ruleset enforces a strict user-ownership model, ensuring that users can only
 * access and modify their own data. All data is nested under `/users/{userId}`, and
 * access control is primarily based on matching the authenticated user's UID with
 * the `userId` in the path.
 *
 * Data Structure:
 * - `/users/{userId}`: Stores user profile data.
 * - `/users/{userId}/meditationSessions/{sessionId}`: Stores meditation session data for a specific user.
 * - `/users/{userId}/dailyMeditationSummaries/{summaryId}`: Stores daily meditation summaries for a specific user.
 *
 * Key Security Decisions:
 * - User listing is disallowed to protect user privacy.
 * - All write operations are strictly controlled via ownership checks.
 * - Data consistency is enforced between the path and the document's internal fields.
 *
 * Denormalization for Authorization:
 * The data structure denormalizes the relationship between users, meditation sessions,
 * and daily summaries. The `userId` is present in both `MeditationSession` and
 * `DailyMeditationSummary` documents, allowing for simple, path-based authorization rules
 * without requiring additional `get()` calls.
 *
 * Structural Segregation:
 * All private user data is stored under the `/users/{userId}` path, ensuring that
 * there is no mixing of public and private data within the same collection. This
 * simplifies access control and improves the performance of list operations.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Controls access to user profile data.
     * @path /users/{userId}
     * @allow (create) - Authenticated user can create their own profile.
     * @allow (get) - Authenticated user can read their own profile.
     * @allow (update) - Authenticated user can update their own profile.
     * @allow (delete) - Authenticated user can delete their own profile.
     * @deny (create) - Unauthenticated user attempts to create a profile.
     * @deny (get) - Authenticated user attempts to read another user's profile.
     * @deny (update) - Authenticated user attempts to update another user's profile.
     * @deny (delete) - Authenticated user attempts to delete another user's profile.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      // Checks if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // Checks if the requested userId matches the authenticated user's ID.
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Checks if the requested userId matches the authenticated user's ID and the document exists.
      function isExistingOwner(userId) {
        return isOwner(userId) && existsAfter(/databases/$(database)/documents/users/$(userId));
      }

      allow get: if isOwner(userId);
      allow list: if false; // User listing is not allowed.
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to meditation session data for a specific user.
     * @path /users/{userId}/meditationSessions/{sessionId}
     * @allow (create) - Authenticated user can create a meditation session for themselves.
     * @allow (get) - Authenticated user can read their own meditation session.
     * @allow (list) - Authenticated user can list their own meditation sessions.
     * @allow (update) - Authenticated user can update their own meditation session.
     * @allow (delete) - Authenticated user can delete their own meditation session.
     * @deny (create) - Unauthenticated user attempts to create a meditation session.
     * @deny (get) - Authenticated user attempts to read another user's meditation session.
     * @deny (list) - Authenticated user attempts to list another user's meditation sessions.
     * @deny (update) - Authenticated user attempts to update another user's meditation session.
     * @deny (delete) - Authenticated user attempts to delete another user's meditation session.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/meditationSessions/{sessionId} {
      // Checks if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // Checks if the requested userId matches the authenticated user's ID.
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Checks if the requested userId matches the authenticated user's ID and the document exists.
      function isExistingOwner(userId) {
        return isOwner(userId) && existsAfter(/databases/$(database)/documents/users/$(userId)/meditationSessions/$(sessionId));
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Controls access to daily meditation summaries for a specific user.
     * @path /users/{userId}/dailyMeditationSummaries/{summaryId}
     * @allow (create) - Authenticated user can create a daily meditation summary for themselves.
     * @allow (get) - Authenticated user can read their own daily meditation summary.
     * @allow (list) - Authenticated user can list their own daily meditation summaries.
     * @allow (update) - Authenticated user can update their own daily meditation summary.
     * @allow (delete) - Authenticated user can delete their own daily meditation summary.
     * @deny (create) - Unauthenticated user attempts to create a daily meditation summary.
     * @deny (get) - Authenticated user attempts to read another user's daily meditation summary.
     * @deny (list) - Authenticated user attempts to list another user's meditation summaries.
     * @deny (update) - Authenticated user attempts to update another user's daily meditation summary.
     * @deny (delete) - Authenticated user attempts to delete another user's daily meditation summary.
     * @principle Restricts access to a user's own data tree.
     */
    match /users/{userId}/dailyMeditationSummaries/{summaryId} {
      // Checks if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // Checks if the requested userId matches the authenticated user's ID.
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Checks if the requested userId matches the authenticated user's ID and the document exists.
      function isExistingOwner(userId) {
        return isOwner(userId) && existsAfter(/databases/$(database)/documents/users/$(userId)/dailyMeditationSummaries/$(summaryId));
      }

      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isSignedIn() && isOwner(userId);
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}