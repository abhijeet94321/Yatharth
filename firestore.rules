/**
 * @file Firestore Security Rules for Yatharth 2025 Application
 * @description This ruleset enforces a strict user-ownership model for all data.
 *
 * Data Structure:
 * - /users/{userId}: Stores user profile data.  Only the user themselves can access their profile.
 * - /users/{userId}/meditationSessions/{sessionId}: Stores meditation session data for a specific user.
 * - /users/{userId}/dailyMeditationSummaries/{summaryId}: Stores daily meditation summaries for a specific user.
 *
 * Key Security Decisions:
 * - User data is private and accessible only to the owning user.
 * - Listing of users is disallowed.
 * - Data consistency between the path and the document's internal fields is enforced on create and update.
 *
 * Denormalization for Authorization:
 * - The 'userId' is present in the path and also as a field in the MeditationSession and DailyMeditationSummary documents. This avoids the need for costly `get()` calls to the /users/{userId} document to check ownership.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Enforces access control for user profiles.
     * @path /users/{userId}
     * @allow (create) - Authenticated user with UID 'user123' can create their own profile at /users/user123 if the document id matches the userId.
     * @allow (get, update, delete) - Authenticated user with UID 'user123' can read, update, and delete their own profile at /users/user123.
     * @deny (create) - Authenticated user with UID 'user456' cannot create a profile at /users/user123.
     * @deny (get, update, delete) - Authenticated user with UID 'user456' cannot read, update or delete the profile at /users/user123.
     * @principle Enforces document ownership for writes.
     */
    match /users/{userId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if false;
      allow create: if isOwner(userId) && request.resource.data.id == userId;
      allow update: if isExistingOwner(userId) && resource.data.id == request.resource.data.id;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces access control for meditation sessions under a specific user.
     * @path /users/{userId}/meditationSessions/{sessionId}
     * @allow (create) - Authenticated user with UID 'user123' can create a new meditation session under /users/user123/meditationSessions/session1 if request.resource.data.userId == 'user123'.
     * @allow (get, list, update, delete) - Authenticated user with UID 'user123' can read, list, update, and delete their own meditation sessions under /users/user123/meditationSessions/{sessionId}.
     * @deny (create) - Authenticated user with UID 'user456' cannot create a meditation session under /users/user123/meditationSessions/session1.
     * @deny (get, list, update, delete) - Authenticated user with UID 'user456' cannot read, list, update, or delete meditation sessions under /users/user123/meditationSessions/{sessionId}.
     * @principle Restricts access to a user's own meditation session data.
     */
    match /users/{userId}/meditationSessions/{sessionId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && resource.data.userId == request.resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Enforces access control for daily meditation summaries under a specific user.
     * @path /users/{userId}/dailyMeditationSummaries/{summaryId}
     * @allow (create) - Authenticated user with UID 'user123' can create a new daily meditation summary under /users/user123/dailyMeditationSummaries/summary1 if request.resource.data.userId == 'user123'.
     * @allow (get, list, update, delete) - Authenticated user with UID 'user123' can read, list, update, and delete their own daily meditation summaries under /users/user123/dailyMeditationSummaries/{summaryId}.
     * @deny (create) - Authenticated user with UID 'user456' cannot create a daily meditation summary under /users/user123/dailyMeditationSummaries/summary1.
     * @deny (get, list, update, delete) - Authenticated user with UID 'user456' cannot read, list, update, or delete daily meditation summaries under /users/user123/dailyMeditationSummaries/{summaryId}.
     * @principle Restricts access to a user's own daily meditation summary data.
     */
    match /users/{userId}/dailyMeditationSummaries/{summaryId} {
      function isOwner(userId) {
        return request.auth != null && request.auth.uid == userId;
      }

      function isExistingOwner(userId) {
        return isOwner(userId) && resource != null;
      }
      allow get: if isOwner(userId);
      allow list: if isOwner(userId);
      allow create: if isOwner(userId) && request.resource.data.userId == userId;
      allow update: if isExistingOwner(userId) && resource.data.userId == request.resource.data.userId;
      allow delete: if isExistingOwner(userId);
    }
  }
}